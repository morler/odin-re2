package regexp

// Simplified matcher for User Story 2 testing
compile_to_nfa_simple :: proc(ast: ^Regexp, prog: ^Prog) -> ErrorCode {
	if ast == nil || prog == nil {
		return .InternalError
	}
	
	// Initialize program
	prog.num_cap = 1
	
	// For now, just handle literals to test basic functionality
	switch ast.op {
	case .OpLiteral:
		if ast.data != nil {
			lit_data := (^Literal_Data)(ast.data)
			literal_str := to_string(lit_data.str)
			
			for i in 0..<len(literal_str) {
				r := rune(literal_str[i])
				inst_index := add_inst(prog, .Rune1, 0, u32(r))
				if i == 0 {
					prog.start = inst_index
				}
				if i > 0 {
					prog.inst[inst_index - 1].out = inst_index
				}
			}
			
			if len(literal_str) > 0 {
				final_index := add_inst(prog, .Match, 0, 0)
				prog.inst[len(prog.inst) - 2].out = final_index
			} else {
				match_index := add_inst(prog, .Match, 0, 0)
				prog.start = match_index
			}
		}
		
	case .NoOp:
		match_index := add_inst(prog, .Match, 0, 0)
		prog.start = match_index
		
	default:
		return .InternalError // Not implemented yet
	}
	
	return .NoError
}